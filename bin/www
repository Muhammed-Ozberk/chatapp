#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
global.env = process.env.env || 'development';
var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');
var socketServer = require("../helpers/socketServer");



const sequelize = require('../models').sequelize;

var env = 'development';
var serverStarted = false;
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


function startServer() {
  if (serverStarted) {
    return;
  } else {
    serverStarted = true;
    socketServer.attach(server); // Socket
    server.listen(port, function () {
      console.log(`App started on ${env} and listening port ${port}`);
    });
  }
}

//database connection
sequelize.authenticate().then(() => {
  console.log('DB Connection has been established successfully.');
  sequelize.migrate().then(migrations => {
    console.log(`Migrate is done ${migrations}`);
    startServer();
  }).catch(err => {
    console.log("Can not migrate db " + err);
  });
}).catch(err => {
  console.error('Unable to connect to the database:', err);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



